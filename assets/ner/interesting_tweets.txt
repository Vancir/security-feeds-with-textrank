Typestate-Guided Fuzzer for Discovering Use-after-Free Vulnerabilities   https://t.co/uYpV26MK8u  #fuzzing #paper
Webinar - Continuously Fuzzing and Improving Suricata (January 2021)   https://t.co/40I5gpc8ft  #fuzzingDefinitely recommended to all of those who are looking for Amazing Reverse Engineering / Advanced Deobfuscation courses.
A perfect example of a professional software security testing (fuzzing) report for a project. Awesome work of @Davkorcz .
Crazy AFL++ 3.00c released finally!
Fuzzing 101 by @metzmanj    https://t.co/ZMUpgckeAl
Atheris: A Coverage-Guided, Native Python Fuzzer   https://t.co/15xXjtXrWP
Another great fuzzing paper by awesome people @is_eqv @bl4ckic3 @ms_s3c @thorstenholz !
Patch Diffing a Cisco RV110W Firmware Update (Part II)   https://t.co/KH8W6iBtQE
ESILSolve - A python symbolic execution framework using r2 and ESIL    https://t.co/7iHtVDV9J7   (now support symbolically execution PCODE)
Advanced Binary Analysis workshop   (given at NorthSec 2020)   https://t.co/jSdUCzqVlz
MEUZZ: Smart Seed Scheduling for Hybrid Fuzzing   https://t.co/xLCzcFCKmn
Fuzzing Image Parsing in Windows, Part One: Color Profiles   https://t.co/lmM7vXhHRu
Legion : A concolic (concrete-symbolic) execution tool assisted by the Monte Carlo tree search algorithm   https://t.co/tbAjyYUbBm
Initial public release of #Microsoft #OneFuzz fuzzing platform    https://t.co/pgU9IuskiG  #fuzzing #Onefuzz #microsoft
haybale: Symbolic execution of LLVM IR, written in Rust   https://t.co/ZvRDOsUbcn
Compromising the macOS Kernel through Safari by Chaining Six Vulnerabilities   https://t.co/qNAtZiNjEM  #Gatech #pwn2own2020 #BlackHat
A fast execution trace symbolizer for Windows   https://t.co/8tW5DlVsst  by @0vercl0k
GTFOBins : GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.   https://t.co/oYhuh4tjm1
Improvements of fuzzing techniques in Vuzzer   https://t.co/n40BqMASHX  #vuzzer
Advanced Binary Deobfuscation Course (Free)   https://t.co/LiVvKF2qnE  by @ntddk
Storm : A blackbox mutational fuzzer for detecting critical bugs in SMT solvers   https://t.co/ii003qN8FB  by @Numair_Mansur
Sys: A Static/Symbolic Tool for Finding Good Bugs in Good (Browser) Code   https://t.co/kG9rV2yj9f  by @deiandelmars
HFL: Hybrid Fuzzing on the Linux Kernel   https://t.co/AGd4vSXhv9
SkCodecFuzzer : Fuzzing harness for testing proprietary image codecs supported by Skia on Android   https://t.co/vy8ooWxSKL  by @j00ru   #Android #Skia #Image #Fuzzing #Harness
UAFuzz: Binary-level Directed Fuzzing for Use-After-Free Vulnerabilities   https://t.co/wrkkVscJz7  by @dungnm1710
libEpollFuzzer : fuzzing for Linux servers   https://t.co/XI5VbWy7hX
Webinar - Continuously Fuzzing and Improving Suricata (January 2021)   https://t.co/40I5gpc8ft  #fuzzing
honggfuzz-rs : Fuzz your Rust code with Google-developed Honggfuzz !   https://t.co/FZm6XqL5Wp
Awesome-AFL has been updated with #Parmesan, the first sanitizer-guided greybox fuzzer.  check it!  https://t.co/AjAGuMcAdi
FuzzGen: Automatic Fuzzer Generation  A tool for automatically synthesizing fuzzers for complex libraries in a given environment. it leverages a whole system analysis to infer the library’s interface and synthesizes fuzzers specifically for that library.   https://t.co/0A0bGKmhxB
Simple example of how to use Qiling together with AFLplusplus to find bugs   https://t.co/TFAiiwrUW8  @qiling_io  #fuzzing #QilingFramrwork
Double-Free RCE in VLC. A honggfuzz how-to   https://t.co/6oghMqVTxr  #honggfuzz #fuzzing
Check out @trailofbits blog on fuzzing solidity with afl-compiler-fuzzer   https://t.co/JptJ3PRCI8
Awesome-AFL list is updated with afl-compiler-fuzzer, a compiler fuzzer developed by guys at @trailofbits . Recently they had a successful fuzzing campaign against solidity compiler.   https://t.co/AjAGuMcAdi  #AFL_Fuzzing_Compilers #afl_compiler
The best of all fuzzing Trainings ever, recommended to every security professional and all fuzzing researchers!
Awesome-Libfuzzer-Harness : An awesome list for effective and powerful harnesses for fuzzing using libfuzzer   https://t.co/LIQyiZtsTQ  Current list includes harnesses for different libraries including libsrtp, libyuv, libxml, libpng, etc ... used by #chromium project
dockerized-fuzzing : Run fuzzing within Docker - Over 30 state of the art fuzzers are available   https://t.co/NKRd0IKKLk
Structure-aware fuzzing for Clang and LLVM with libprotobuf-mutator   https://t.co/4L9dFSgaBQ  /cc @kayseesee
Guys! Awesome-AFL updated with #Ankou fuzzer, a great fuzzer by @Jilyac   Just recommend all you guys to give Ankou a try!   https://t.co/AjAGuMcAdi
Fuzzing software: common challenges and potential solutions (Part 1)  https://t.co/PB7oMetgKl #fuzzing #exploitation
A few more efficient fuzzers has already been added to list .  Check  https://t.co/AjAGuMcAdi  Thanks to  van Hauser @hackerschoice   #awesome_afl #AFL #fuzzer #securitytesting #vulnerability
AFL++2.59c released    https://t.co/HiJ6XoPlx7 #fuzzing #dukeBarman
Finding Vulnerabilities in Closed Source Windows Software by Applying Fuzzing   https://t.co/2DjdyplI0Q  #winafl #fuzzing #vulnerability
Awesome-AFL : A curated list of different AFL forks and AFL inspired #fuzzers with detailed equivalent academic papers with AFL-fuzzing tutorials   https://t.co/AjAGuMcAdi  #awesome #AFL #fuzzers #Fuzzer #Awesome_AFL #AFL_forks #AFL_fuzzing_Tutorials
PowerFL: Fuzzing VxWorks embedded systems  PowerPC + AFL = PowerAFL   https://t.co/LOBOiQzUX5  /cc @trailofbits   #powerpc_fuzzing #fuzzing #AFL #POWERAFL
FuzzBuilder - Automated building greybox fuzzing environment for C/C++ library   https://t.co/3H98zbhJTK  #afl_fuzzer #AFL #FuzzBuilder #fuzzer #libfuzz
Implementing coverage and feedback for a JIT and finding bugs in a CSV parser    https://t.co/X0Uk3KPeHf  /cc @gamozolabs   #advanced_fuzzing #rust
History of symbolic execution (as well as SAT/SMT solving, fuzzing, and taint data tracking)  https://t.co/yRXbv0RvCW  #timeline #symbolic_execution #sat #smt #solvers #smt_solver #fuzzing #taint_tracking #taint
Frizzer - A coverage-guided blackbox fuzzer based on the frida instrumentation framework   https://t.co/8kb3jfKWql
Software testing: fuzzing and concolic execution with AFL, KLEE and ANGR   https://t.co/PK9D74csRW  #concolic_execution #AFL #KLEE #Angr
AFL fuzzer llvm-mode clang seg-fault installation problem on ubuntu 18.04 bionic workaround on my github :   https://t.co/vzRl252gvV  #afl_workaround #afl_trouble #afl_install_problem #afl_llvm
Guided Fuzzing with Driller   https://t.co/5MWFc189Dt  #CGC #Driller #Shellphish #AFL #symbolic_AFL_fuzzing #shellphuzz
A set of helpers and examples to fuzz Win32 binaries with AFL++ QEMU   https://t.co/lSM4vcumPM  #winafl #win32fuzzing #fuzzing #AFL
Haha! art of well-configured fuzzer on latest version of some library under linux   12 Unique crashes :-)  https://t.co/MST6czL5Ay
Fuzzing the Kernel using AFL Unicorn   https://t.co/usszuPOh2v  #kernelfuzzing #unicorn
SharpFuzz: AFL-based fuzz testing for .NET   https://t.co/WltqHgsxjd
Fuzzing Linux GUI/GTK Programs With American Fuzzy Lop (AFL) For Fun    https://t.co/s4UvJ7blAy  #afl #fuzzing #GUI #afl_gui_fuzzing
Improve fuzzing harness with afl AFL_HARDEN=1 -O2  #fuzzing #afl #harness #gold_notes
Crash Triage Process   https://t.co/i2VNUZRSSD  #crash_triage #fuzzing
Fuzzing projects with american fuzzy lop (AFL)   https://t.co/WlLqtSK5UF  #afl #fuzzer #fuzzing #afl_fuzzing
Introduction to fuzzing linux kernel  https://t.co/qixtiHiAjV
Distributed fuzzing with Fuzzilli should hopefully be a bit easier now:  https://t.co/CjeoeOquyf :)
New blogpost on some recent fuzzing work of mine (and 0click attack surfaces!):  https://t.co/b2FInuz4bG
Fuzzilli finally has a decent type system:  https://t.co/8434RQQP7S this should simplify tuning fuzzilli to target (or omit) specific builtins, methods, or properties and should improve the correctness rate a bit as well. Will also hopefully enable more cool stuff in the future =)
A fuzzer would likely have a hard time triggering the bug that way. Fuzzilli found a simpler case that triggered another aspect of the issue, not involving side effects, which is also easier and a bit more reliable to exploit (doesn't involve heap manipulation)
A few more bugs found by fuzzilli ( https://t.co/2noeJIATVf) have recently been derestricted:  https://t.co/Ay0T9rBbZ3 most of these issues were also quite interesting (and fun!) to analyze for me
The first batch of vulnerabilities found by fuzzilli ( https://t.co/2noeJIATVf) has been derestricted by now:  https://t.co/Ay0T9rBbZ3 the first two issues in the list (1753, 1757) were found through manual code review though
Fuzzilli, my JavaScript engine fuzzer, is now open source:  https://t.co/2noeJIATVf \o/ Keep an eye on the Project Zero bugtracker in the next few weeks for some of the bugs found with it. Also let me know if you encounter any problems when using it! :)
Here are the slides from my #OffensiveCon19 talk about my approach for JavaScript engine fuzzing:  https://t.co/ITeCL1D1gP My master's thesis (for which I developed the fuzzer) can be found here:  https://t.co/hv5en0hmIT Thanks for the great conference @offensive_con! =)
ToothPicker - an in-process, coverage-guided fuzzer for iOS. It was developed to specifically targets iOS's Bluetooth daemon bluetoothd and to analyze various Bluetooth protocols on iOS #MobileSecurity #iOSsecurity by @ttdennis   https://t.co/7dpcDt5E2E
Structured fuzzing Android's NFC #MobileSecurity #AndroidSecurity by @GHSecurityLab   https://t.co/qnNawytVsp
Play fuzzing machine – hunting iOS/macOS kernel vulnerabilities automatically and smartly #MobileSecurity #iOSsecurity [VB2019 paper]  https://t.co/GnZ5xL2jcM  https://t.co/JRXfj4vh0g
Frizzer - Frida-based general purpose fuzzer #MobileSecurity @fridadotre   https://t.co/k2t960SPKJ
Dexofuzzy: Android malware similarity clustering method using opcode sequence #MobileSecurity #AndroidSecurity [PAPER]  https://t.co/b0f7ub0TF2  https://t.co/VOpV7HLzfc
Launching feedback-driven fuzzing on TrustZone TEE #MobileSecurity #AndroidSecurity #HITBGSEC2019 [SLIDES] by @e13fter   https://t.co/TQiFULb1RW  https://t.co/3FlXpFrBr2
Writing the worlds worst Android fuzzer, and then improving it #MobileSecurity #AndroidSecurity by @gamozolabs  https://t.co/dM0E8k033i
Droid Application Fuzz Framework - Android application fuzzing framework with fuzzers and crash monitor by @ajinabraham  #MobileSecurity #AndroidSecurity  https://t.co/eutBx2z64y  https://t.co/VmvlQGM1al
Diffuzzing Android Kernel Drivers #MobileSecurity #AndroidSecurity #BHEU SLIDES:  https://t.co/oTGJA6qz70 PAPER:  https://t.co/ksVUZaZH7M  https://t.co/0RoGj5OgJs
I'd like to advertise a little bit about our recent technical report on fuzzing Android systems' VoIP components:  https://t.co/90Buaa2cng  Seems google search cannot index this link. It is actually the first public paper after I joined CUHK IE in mid Aug. :)  https://t.co/QfrnnABAM0
Congratulations to the AFL++ team (@hackerschoice @andreafioraldi @domenuk + others) for officially replacing afl-fuzz in the Google OSS-Fuzz platform that continuously fuzzes hundreds of critical opensource packages. AFL++ improvements are remarkable!   https://t.co/SAne15rVpy
Another day, another fuzz experiment. This is jackalope. Updated gdiplus harness to use shmem, running in ramdisk, 2 threads each, left pane gif, right pane jpeg. I recommend using 32bit target if possible when using TinyInst based fuzzers, 64bit targets tend to throw exceptions  https://t.co/jliYzyooRR
Based on the rate of research, you could say fuzzing is kind of a big deal. So many papers are being published it’s hard to track it all, let alone read it all. These repos are doing a good job indexing the papers:   https://t.co/qOVhiyT6gt    https://t.co/taRVPm6iGE
I checked in haze, a simple coverage guided fuzzer for Windows based on @ifsecure's TinyInst coverage engine. Input dir is sorted by smallest, if new coverage found copy to queue, then loop selecting random input from queue flipping up to 16 bytes  https://t.co/qbfdZUg2eN  https://t.co/sj7z6rtuFi
Congrats to @hunterbr72 from @TalosSecurity winning the IDA plugin contest with Dynamic Data Resolver that provides runtime introspection with DynamoRIO and presents that info nicely in IDA in various ways. Looks useful for binary harness writers for fuzzing as well as malware RE
Awesome talk by @jmartijnb on fuzzing TEE. Great discussion around harnessing a difficult target, which doesn’t get enough attention considering its 90% of the work. Proxy processes, bitmap as a custom grammar for api calls, etc. good stuff!  https://t.co/JWES1tzNLV
Nice archive of papers related to fuzzing   https://t.co/taRVPlOHi4
Ghidra script to config & run WinAFL   Install dynamorio and winafl Add LaunchWinAFL to ghidra scripts  Set one-time config at top Load target exe & dlls into ghidra  Go to target func in disasm Run script to start fuzzing!  #ghidra @GHIDRA_RE @Ghidra_tips  https://t.co/zYuMHerLUQ
LaunchWinAFL Usage:   1) Install dynamorio and winafl  2) add  https://t.co/QjnQ4bI8iO to ghidra scripts, set some one-time config at top; install paths, etc  3) load target exe & coverage dlls into ghidra   4) go to target function in disasm  5) run script to start fuzzing!
I had an emergency surgery yesterday which is always fun. I don’t want you to feel left out, so here’s a quick ghidra script to perform expedited surgery on binaries for auto fuzzing with WinAFL.   Instructions in next tweet.    https://t.co/zYuMHerLUQ
Current status hybrid fuzzing and concolic execution with afl, qsym, and moflow. qsym is applying DFS concolic exec to an afl slave .cur_input and moflow is applying generational concolic execution to the afl master .cur_input  https://t.co/IWR2ZBkyc3
Jaewon with another great improvement to Domato browser fuzzer  https://t.co/UmgkP8xd8m
This is great work, custom system calls added to account for multicore contention on I/O and speed hacks for forking processes during fuzzing. 7x speed improvement for AFL on 30 core machine, 170x perf increase for libFuzzer on 30 cores. More cores, more improvement  https://t.co/EAqp6sF0AP
test: wget  https://t.co/OKa7nHl4XT CC=afl-gcc ./afl_build.sh libpng cd /tmp/libpng/libpng-* afl-fuzz -i $in -o $out -- ./pngtest-static @@
And here's the real problem with doing bare metal kernel fuzzing.  https://t.co/cFZH0USwWi
Jinghan is going to present our new paper on solving the seed/state explosion problem in fuzzing with the a hierarchical RL-based scheduler.  https://t.co/RrU92Nbj4T
Concolic execution was considered slow and not as good as fuzzers. New numbers from LAVA-M (I know it’s biased) on exhaustive solving (context-sensitive branch coverage), without input length growth/shrink: uniq, 7s, 20 bugs; base64, 7s, 46; md5, 32s, 61; who, 108s, 1407. 😎
Destroying x86_64 instruction decoders with differential fuzzing   https://t.co/eusFPjYd1n
Just ran the new LibAFL (new Rust version). Speed is amazing ca. 5 MILLION exec/s. The same harness did 70k exec/s on Honggfuzz. It is a old boring "libpng" harness. Still digesting on it, how it works and what are the differences for example between Honggfuzz and others @domenuk  https://t.co/ZnvexLShFy
Also read on the Hongfuzz website, they have achieved 1 million exec per second on intel i7 - "A simple/empty LLVMFuzzerTestOneInput function can be tested with up to 1mo iterations per second on a relatively modern CPU (e.g. i7-6700K)."  Wondering what "simple/empty" means here
Added automatic snapshot collection, shared memory to corpus and modified mutator in ptrace fuzzer demo. 2nd increased performance to ca. 30k exec per sec on one core compared to ca. 20k possibly to less heap moving, lookup in previous implementation. *Experimental* cc @h0mbre_
Playing with @h0mbre_ "Dragonfly". Had some issues to make it to work. BUT after a while, @h0mbre_  help and debugging @d0c_s4vage  approach, I made it. Achieve a speed of WHOOPING 26k/sec per core!!! Beating AFL with snapshotting. This is fast!!!! It is fuzzing "Oniguruma" lib
I personally got a 3x increase in AFL vs AFL persistent mode in my tests. More here:  https://t.co/1WEBOmgAwJ #security #fuzzing #speedup
"Our experiment shows that the proposed primitives speed up AFL and LibFuzzer by 6.1 to 28.9× and 1.1 to 735.7×, respectively, on the overall number of executions per second when targeting Google’s fuzzer test suite with 120 cores"
Interesting paper & code from Georgia Tech (Georgia Institute of Technology, Atlanta, GA) about increasing fuzzing speed with using new OS primitives (process snapshot vs fork() in fuzzing using modified kernel syscall etc)
Our (CC: @nSinusR @balzarot) @NDSSSymposium paper: "What You Corrupt Is Not What You Crash: Challenges in Fuzzing Embedded Devices" Is now online:  https://t.co/gXTXRDJV6L Tl;dr: - memory corruption bugs often undetected - makes fuzzing hard - monitoring execution as work around  https://t.co/TG4bkfyK65
A fuzzer and a symbolic executor walk into a cloud  https://t.co/pzG14PxIyo by @trailofbits
Here are some tutorials on #fuzzing  https://t.co/ZZPxASke0D
Barbervisor: Journey developing a snapshot fuzzer with Intel VT-x  https://t.co/owEsuDovEy
Using miasm to fuzz binaries with afl -  https://t.co/MCDQBOULeq
AFL on Android -  https://t.co/YjCsdcLgXx #fuzzing #afl #android
Fuzzing @rustlang code with AFL (american-fuzzy-lop) -  https://t.co/NGiWfXAAfu #rustlang #fuzzing
RT @Dinosn: Introducing Shazzer: A shared online fuzzer  http://t.co/NEFdUuTH
Google open-sources Atheris, a fuzzer for finding security bugs in Python code  -Atheris is available on both GitHub and PyPI -Supports fuzzing Python code written in Python 2.7 and Python 3.3+, but also native extensions created with CPython   https://t.co/6B8oqAhxLw  https://t.co/V0DCi46034
Microsoft has open-sourced today its internal fuzzer -- OneFuzz   https://t.co/C3c73HUliH  https://t.co/n8yYvwhcMj
Oralyzer is a simple Python script capable of identifying an open redirection vulnerability in a website.  It does that by fuzzing the URL i.e. provided as the input.   https://t.co/qfDYxRALKX  https://t.co/wQEttERjnu
New fuzzing tool finds 26 bugs in the USB driver stack of Linux, Windows, macOS, and FreeBSD  - 18 bugs impact Linux (11 patched already) - 1 bug impacts FreeBSD - 3 bugs in macOS (two reboots, one freeze) - 4 in Windows (BSODs)   https://t.co/NsK668A6Ri  https://t.co/SBVIXFT0d7
Frankenstein provides a virtual environment to fuzz wireless firmware   https://t.co/AFATTD2bH1  https://t.co/YS4A5xfBuf
Google launches FuzzBench, a a free service that evaluates fuzzers on a wide variety of real-world benchmarks, at Google scale  Blog:  https://t.co/TYhueXJsq0  GitHub:  https://t.co/j7mTNRn9Pz  Docs:  https://t.co/t3QaZ79kxl  https://t.co/3ltvhDiqSv
Bug hunter earns $8k for fuzzing and finding bugs in Chrome's implementation of its <portal> HTML element    https://t.co/uKoAE4QlL4  https://t.co/pKfV3OUQfS
Academics find eight vulnerabilities in Android's VoIP components  -research team fuzzed Android OS' VoIP backend -found 8 vulns + 1 in the VK app -bugs allow RCE, call spoofing, silent calls, permanent DoS, crashes, others   https://t.co/PdFDu9Lo1m  https://t.co/BVIyTj1FRr
Mozilla releases Grizzly, a browser fuzzing framework   https://t.co/3nrvnlcL8D  https://t.co/Qf62E0ZnuP
Research team developed a tool called LTEFuzz for fuzzing LTE protocol and its implementations. They found 51 flaws, of which, 36 were new.  I'm not sure how to read this graph for the new ones, though. 🤷‍♂️  https://t.co/GOsqHw5qLo
Google open-sources ClusterFuzz, the fuzzing framework it developed for Chrome   https://t.co/HI3Is4ew08  https://t.co/8feAuRsIkN
Google's automated fuzz bot has found over 9,000 bugs in the past two years   https://t.co/0WPYu51s3E  https://t.co/nx674gCv1j
TrailOfBits releases a fuzzer for Ethereum contracts named Echidna   https://t.co/ZLn2wUMskA  https://t.co/zGgiunquGg
BlackWidow - A Python based web application scanner to gather OSINT and fuzz for OWASP vulnerabilities on a target website  https://t.co/BiabJYJx3x  https://t.co/SYWpPzX5FN
Virus Bulletin :: VB2019 paper: Play fuzzing machine – hunting iOS/macOS kernel vulnerabilities automatically and smartly  https://t.co/s0kgxuxB5K
Coverage-guided kernel fuzzing with syzkaller  https://t.co/iYwkf7dCKa
android fuzzing。 https://t.co/qgnU00Kfi4
"@_larry0: "@itsbm0de: #Browser #fuzzing: introducing bamboo.js @  http://t.co/6dzSUxRfhY"cc @ra6bit"
I highly recommend this training. 💯  If you want to advance your fuzzing skills *this* is the training you are loosing for.
Awesome Fuzzing - curated list of fuzzing resources for learning Fuzzing and initial phases of Exploit Development.  https://t.co/aIKFY9pzDA  https://t.co/kuP9A113Tn
Our #icse2021 paper on Bonsai Fuzzing is now available. Key idea: Instead of trying to minimize noisy fuzzer-generated inputs, we can synthesize nice-looking inputs that are concise by construction.  Preprint:  https://t.co/qOhno8qtMF Replication package:  https://t.co/Mzh9jvOUqX  https://t.co/wNXimm8zE7
We wanted to generate small mostly-well-typed ChocoPy programs for students to use as executable specifications. Conventional fuzzing followed by syntax-tree minimization is not always optimal. Instead, Bonsai fuzzing grows valid programs that are *concise by construction*. (2/3)  https://t.co/LqZtWsQu55
Neat. JQF ( https://t.co/OHVTVPQE5i) is now officially supported by GitLab as part of the CI workflow:  https://t.co/iBRBq6M2g2. Keep fuzzing! #JQF
My favorite paper from Day 2 of @issta_conf. Key idea: given a failing input in some grammar, systematically replace concrete nodes in the input's parse tree with abstract nodes and fuzz their expansions; if all expansions fail, then you have an explainable family of failures.  https://t.co/t5EhKQYXMN
This paper seeded a lot of academic research on coverage guided fuzzing algorithms, including much of my PhD work. Cheers to @mboehme_ @thuanpv_ and Abhik Roychoudhury!
Art, science, and different perspectives on fuzzing. Both excellent articles!  https://t.co/wOsMRG7nig
Really cool stuff!   Key insight: A grammar-based fuzzer is essentially an interpreter for a random bitstream in the language of grammar symbols.   F1 applies tricks from VM-land such as supercompilation and context threading to get massive speedups in input generation.  https://t.co/EPPfXqV34L
Question for fuzzing enthusiasts: Where can I find custom libFuzzer mutators apart from the canonical PNG example? Are there mutators for things like ASTs or IRs out there in the wild? Language/library doesn't matter.
Co-authored my first @USENIXSecurity paper, with the amazing folks at @Samsung_RA!   Fuzzing one of the most unfuzzable environments, via full-system emulation, reveals 48 vulnerable "Trusted Applications" across four TEEs that run on ~2 billion devices.  https://t.co/70aQoXu6MU  https://t.co/AiXaMbEaPe
Re: Evaluation of fuzzers, I echo @cestlemieux's suggestion completely. Check out some great examples in this thread.
Finally releasing FuzzFactory, our AFL extension for customizing search strategies and domain-specific fuzzing goals! Preprint of our upcoming OOPSLA paper at  https://t.co/Dh7kxSFCMG. Joint work with @cestlemieux, who also designed the fantastic logo!  https://t.co/bxkMa7sH3u
In the paper, we identify desirable properties for such strategies that suffice to guarantee monotonic progress towards multi-dimensional objectives. We used FuzzFactory to replicate 3 prior tools and built 3 new fuzzers! PDF/tool coming soon. Joint w/ @cestlemieux et al. (2/2)
Conditionally accepted at OOPSLA @splashcon! FuzzFactory generalizes coverage-guided fuzzing (AFL) to domain-specific testing goals. Researchers can define strategies for selectively saving fuzzed inputs ("waypoints") using FuzzFactory's API from instrumented test programs. (1/2)  https://t.co/ToYI18CHZp
I'll be giving a tool demo of #JQF, our Java fuzzing platform, at #ISSTA19 in Beijing. JQF powers junit-quickcheck property tests with coverage-guided algorithms such as Zest and PerfFuzz!  Preprint:  https://t.co/hPaK9eL2lq  https://t.co/vxCIGiqojx
Our paper on Semantic Fuzzing will appear in #ISSTA19! Zest combines property-based testing (QuickCheck) with AFL-style coverage-guided fuzzing. Zest is integrated into #JQF, our Java fuzzing platform.  Preprint:  https://t.co/r1P3vJTLdE Source + tutorials:  https://t.co/OUObQHT1H4  https://t.co/5gj0GZAosZ
My fuzzer discovered a memory leak in libarchive (CVE-2019-11463) that was caused by a typo in a C macro. Keep fuzzing, everyone.  https://t.co/YN0pnuLOms
GitHub - marin-m/pbtk: A toolset for reverse engineering and fuzzing Protobuf-based apps  https://t.co/1wYfbzqwaM
Guided in-process fuzzing of Chrome components  https://t.co/lc4ENRg9vS
hi, @vishwas_s ：In 《Fuzzing with complexities》,U cited an example about fuzzer for TTF in Peach PIT format,can u send the fuzzer for me,thx
.@kayseesee will speak at #usesec17 on @google's OSS-Fuzz & fuzzing in general. More details & full #usesec17 prgm:  https://t.co/sY3DZqlsFE
An impressively principled and formal approach to fuzzing! SymFuzz: Program-Adaptive Mutational Fuzzing  http://t.co/fFY28eTH5L
I'm extremely grateful for the opportunity to attend the #BurpSuitePro training by .@Agarri_FR! It was excellent, dynamic, challenging, and fun! My head's still thinking about macros and fuzzing! Thank you! 🙏
[Fuzzing with AFLplusplus] How to fuzz a binary with no source code on L...  https://t.co/04yTOmhMMs via @YouTube
[Fuzzing with AFLpluspls] Installing AFLPlusplus and fuzzing a simple C ...  https://t.co/ryYbcoFXAH via @YouTube
after a long time I created a video on fuzzing. maintaining a hobby is really hard :-p [Fuzzing with AFL] fuzzing a binary with no source code with AFL in Qemu...  https://t.co/5FRvUi309r via @YouTube
for beginners, this is a good example program if you want to test various fuzzers [thanks @microsvuln ]   https://t.co/u2W8a1EnF0  first understand the code/logic and then try it with afl,hongfuzz,libfuzzer others to see where it crashes.
*2020* 14 cves, hundreads or thousands of crashes  Countless hours of fuzzing. Learned alot about windows,Linux,various fuzzers. Delivered trainings at 2 conferences. Spent hours in creating fuzzing videos series. Made awesome friends and learned from them  *2021* I am ready 😎🤘
2018-19: started again with Winafl. Got few crashes.. started reading about how fuzzers work, root cause,crash triage, coding my own small scripts. 2020: still fuzzing,writing harness, modifying mutators, building things at my own..
2016: hear about fuzzing, read some "how to" blog post, followed them step by step. Run fuzzers like AFL/honggfuzz with almost no idea how they work. Gave up after a month as didn't find any crashes.people laughed at this failed attempt. 2017-18: thought fuzzing is not my thing.
Damn vulnerable C program and fuzzing video tutorials with AFL,winafl, honggfuzz,libfuzzer. Regularly updated with new and original contents:  https://t.co/XPZQnTEUhe
[Fuzzing with winafl] Writing fuzz harness for a windows dll and fuzzing it using #winafl. @YouTube @Dinosn @_r_netsec @r_redteamsec  https://t.co/UQATr8UrM6 #fuzzing #harness
[Fuzzing with libfuzzer,AFL] How to fuzz libfuzzer harness program using AFL  https://t.co/LwcEg6r9ox via @YouTube
finally, its done. WinAFL+ AFLFast Power scheduler + MOpt Mutators. Something I was busy since last few days.. need to test more and see the results.. #AFL #winafl #fuzzers #LearningNeverStops  https://t.co/UD2biNumZS
Video [Fuzzing with honggfuzz] Fuzzing tcpdump with honggfuzz  https://t.co/zKGhp2zGcz
-What is a fuzz function? -How to check if program is getting instrumented correctly? -how to run winafl? -how to find root cause using windbg? More on winafl. see the video..  [Fuzzing with WinAFL] What is fuzzing function, running winafl  https://t.co/6zEql4JrjY via @YouTube
[Fuzzing with hongfuzz] Fuzzing a simple C program  https://t.co/WpmF8l9ujT  https://t.co/dvLbAjY6mx
Here is the playlist of fuzzing programs with with AFL series. RT/like Contains following: 1. Installing AFL on Ubuntu  2. Writing a simple C program and fuzzing using AFL. 3. Different types of vulnerabilities  4. Crash triage and root cause   https://t.co/Rqv1k1vjNe via @YouTube
do you want to know about? integer overflow integer underflow Out of bound Read Out of bound Write Double Free Use After Free Memory leaks  here is the damn vulnerable c program i coded to explain AFL fuzzing in my videos:  https://t.co/XPZQnTWvFO  fuzz it using AFL and see :)
Trying to create some simple videos on fuzzing, hope you will like it. Fuzzing simple C program with AFL on Linux  https://t.co/BO79SoNj6t via @YouTube
[tool]  https://t.co/UNr9gDFhb1 this is the script which act as frontend for me in running all the winafl related tasks. this will save lot of time. you can generate config file for each project like gdi,mdb and stuff you want to fuzz and then use it.  https://t.co/8zgCbD9ZEC
releasing first version of CrashAnalyzer, it is a tool to help in sorting out crashes which you found using fuzzing. this was a quick script i coded to organize crashes by crashing function name. it uses winappdbg. modify as u want.  https://t.co/cT2E7i6ruG
added option to AFL_Runner.py to first run winafl with drrun.exe in debug mode to generate log.  https://t.co/TQa2WnC8Pq #winafl #fuzzing
Releasing a quick and dirty script i coded, afl_runner.py . winafl takes lot of arguments and a user might make some mistake in passing parameters. with this script, you can configure different parameter once and then run it when you want.  https://t.co/TQa2WnC8Pq #winafl #fuzzing
Downloading samples for fuzzing.  https://t.co/YT2CuFYFXu
Really great introduction to fuzzing and WinAFL using examples of closed source software   https://t.co/rkTYtZzRgz
